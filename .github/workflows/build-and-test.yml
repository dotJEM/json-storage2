name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.x.x
    
    - name: Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      
    - name: Display GitVersion variables (without prefix)
      run: |
        echo "Major: ${{ env.major }}"
        echo "Minor: ${{ env.minor }}"
        echo "Patch: ${{ env.patch }}"
        echo "PreReleaseTag: ${{ env.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ env.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ env.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ env.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ env.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ env.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ env.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ env.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ env.majorMinorPatch }}"
        echo "SemVer: ${{ env.semVer }}"
        echo "LegacySemVer: ${{ env.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ env.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ env.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ env.assemblySemFileVer }}"
        echo "FullSemVer: ${{ env.fullSemVer }}"
        echo "InformationalVersion: ${{ env.informationalVersion }}"
        echo "BranchName: ${{ env.branchName }}"
        echo "EscapedBranchName: ${{ env.escapedBranchName }}"
        echo "Sha: ${{ env.sha }}"
        echo "ShortSha: ${{ env.shortSha }}"
        echo "NuGetVersionV2: ${{ env.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ env.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ env.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ env.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ env.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ env.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ env.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ env.uncommittedChanges }}"
        echo "CommitDate: ${{ env.commitDate }}"

    - name: Display GitVersion variables (with prefix)
      run: |
        echo "Major: ${{ env.GitVersion_Major }}"
        echo "Minor: ${{ env.GitVersion_Minor }}"
        echo "Patch: ${{ env.GitVersion_Patch }}"
        echo "PreReleaseTag: ${{ env.GitVersion_PreReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ env.GitVersion_PreReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ env.GitVersion_PreReleaseLabel }}"
        echo "PreReleaseNumber: ${{ env.GitVersion_PreReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ env.GitVersion_WeightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ env.GitVersion_BuildMetaData }}"
        echo "BuildMetaDataPadded: ${{ env.GitVersion_BuildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ env.GitVersion_FullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ env.GitVersion_MajorMinorPatch }}"
        echo "SemVer: ${{ env.GitVersion_SemVer }}"
        echo "LegacySemVer: ${{ env.GitVersion_LegacySemVer }}"
        echo "LegacySemVerPadded: ${{ env.GitVersion_LegacySemVerPadded }}"
        echo "AssemblySemVer: ${{ env.GitVersion_AssemblySemVer }}"
        echo "AssemblySemFileVer: ${{ env.GitVersion_AssemblySemFileVer }}"
        echo "FullSemVer: ${{ env.GitVersion_FullSemVer }}"
        echo "InformationalVersion: ${{ env.GitVersion_InformationalVersion }}"
        echo "BranchName: ${{ env.GitVersion_BranchName }}"
        echo "EscapedBranchName: ${{ env.GitVersion_EscapedBranchName }}"
        echo "Sha: ${{ env.GitVersion_Sha }}"
        echo "ShortSha: ${{ env.GitVersion_ShortSha }}"
        echo "NuGetVersionV2: ${{ env.GitVersion_NuGetVersionV2 }}"
        echo "NuGetVersion: ${{ env.GitVersion_NuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ env.GitVersion_NuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ env.GitVersion_NuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ env.GitVersion_VersionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ env.GitVersion_CommitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ env.GitVersion_CommitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ env.GitVersion_UncommittedChanges }}"
        echo "CommitDate: ${{ env.GitVersion_CommitDate }}"
      
    
    # Starting the SQL Server here so that it has time to get up and running before we get to the tests, it seems doing this before the restore and build
    # is consistent enough.
    - name: Start SQLServer Image
      run: docker run --name sql-server -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=UUID58cf785a1c9c4bb3b62cb593d530c865!" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest
            
    - name: Restore dependencies
      run: dotnet restore src/DotJEM.Json.Storage2.sln
      
    - name: Build
      run: dotnet build src/DotJEM.Json.Storage2.sln --configuration Release --no-restore
    
    - name: Create Test Database
      run: docker exec -i sql-server /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P UUID58cf785a1c9c4bb3b62cb593d530c865! -d master -Q "CREATE DATABASE storage2test" \
    
    - name: Test
      run: dotnet test src/DotJEM.Json.Storage2.sln --configuration Release --no-build --verbosity normal
      env:
        MSSQL_SA_PASSWORD: UUID58cf785a1c9c4bb3b62cb593d530c865!
        mssql_connection: "Data Source=localhost,1433; User Id=sa;;Initial Catalog=storage2test;Password=UUID58cf785a1c9c4bb3b62cb593d530c865!"

    - name: Pack
      run: dotnet pack src/DotJEM.Json.Storage2.sln --configuration Release
